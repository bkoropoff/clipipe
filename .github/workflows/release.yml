name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on tags like v1.0.0
  workflow_dispatch: # Allow manual triggering

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      # Check out the repository
      - name: Check out code
        uses: actions/checkout@v4

      # Cache Rust
      - name: Cache Rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '~/.cargo/bin/*') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Set up Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-msvc

      # Build the Rust package
      - name: Build
        run: cargo build --release
        env:
          # Statically link CRT
          RUSTFLAGS: '-C target-feature=+crt-static'

      # Run tests
      - name: Test
        run: cargo test --release -- --test-threads=1

      # Upload the executable as an artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: clipipe.exe
          path: target/release/clipipe.exe
          if-no-files-found: error

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache apt packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: musl-tools sway xwayland
          version: 1.0

      - name: Cache Rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '~/.cargo/bin/*') }}
          restore-keys: |
            ${{ runner.os }}-cargo- name: Install musl-tools

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl

      - name: Build
        run: cargo build --release --target x86_64-unknown-linux-musl
      - name: Test
        run: |
          WLR_LIBINPUT_NO_DEVICES=1
          WLR_BACKENDS=headless
          WAYLAND_DISPLAY=wayland-1
          DISPLAY=:1
          export WLR_LIBINPUT_NO_DEVICES WLR_BACKENDS WAYLAND_DISPLAY DISPLAY
          sway --unsupported-gpu -c /dev/null -d >sway.log 2>&1 &
          pids=$!
          sleep 2
          Xwayland "$DISPLAY" >xwayland.log 2>&1 &
          pids="$pids $!"
          sleep 2
          cargo test --release --target x86_64-unknown-linux-musl -- --test-threads=1
          rc=$?
          kill $pids
          wait
          exit $rc
      - name: Rename binary
        run: cp -l target/x86_64-unknown-linux-musl/release/clipipe clipipe-linux-x86_64
      - name: Strip binary
        run: strip clipipe-linux-x86_64

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: clipipe-linux-x86_64
          path: clipipe-linux-x86_64
          if-no-files-found: error

  create-draft-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      # Download the built executables
      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts/
          merge-multiple: true
      # Create a draft release
      - name: Create Draft Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
