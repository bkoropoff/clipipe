name: Main Workflow

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master
  workflow_dispatch: ~

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      # Check out the repository
      - name: Check Out Code
        uses: actions/checkout@v4

      # Cache Rust
      - name: Cache Rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '~/.cargo/bin/*') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Set up Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-msvc

       # Download and unpack Neovim release, placing it in PATH
      - name: Install Neovim
        shell: powershell
        run: |
          $url = "https://github.com/neovim/neovim/releases/download/v0.11.3/nvim-win64.zip"
          $zipPath = "$env:RUNNER_TEMP\nvim-win64.zip"
          $extractPath = "$env:RUNNER_TEMP\"
          Invoke-WebRequest -Uri $url -OutFile $zipPath
          Expand-Archive -Path $zipPath -DestinationPath $extractPath
          Write-Output "$extractPath\nvim-win64\bin" | Out-File -FilePath $env:GITHUB_PATH -Append

      # Build the Rust package
      - name: Build
        run: cargo build --release
        env:
          # Statically link CRT
          RUSTFLAGS: '-C target-feature=+crt-static'

      # Run tests
      - name: Test
        run: cargo test --release

      # Upload the executable as an artifact
      - name: Upload Artifact
        if: &is-release-ref startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: clipipe.exe
          path: target/release/clipipe.exe
          if-no-files-found: error

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache apt packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: musl-tools sway xwayland
          version: 1.0

      - name: Cache Rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '~/.cargo/bin/*') }}
          restore-keys: |
            ${{ runner.os }}-cargo- name: Install musl-tools

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl

      - name: Install Neovim
        run: |
          set -x
          url="https://github.com/neovim/neovim/releases/download/v0.11.3/nvim-linux-x86_64.tar.gz"
          tarpath="$RUNNER_TEMP/nvim-linux-x86_64.tar.gz"
          extractpath="$RUNNER_TEMP/"
          curl --no-progress-meter -f -L -o "$tarpath" "$url"
          tar -C "$extractpath" -x -v -f "$tarpath"
          echo "$extractpath/nvim-linux-x86_64/bin" >> "$GITHUB_PATH"

      - name: Build
        run: cargo build --release --target x86_64-unknown-linux-musl

      - name: Test
        run: |
          set -x
          WLR_LIBINPUT_NO_DEVICES=1
          WLR_BACKENDS=headless
          WAYLAND_DISPLAY=wayland-1
          DISPLAY=:1
          export WLR_LIBINPUT_NO_DEVICES WLR_BACKENDS WAYLAND_DISPLAY DISPLAY
          sway --unsupported-gpu -c /dev/null -d >sway.log 2>&1 &
          pids=$!
          sleep 2
          Xwayland "$DISPLAY" >xwayland.log 2>&1 &
          pids="$pids $!"
          sleep 2
          cargo test --release --target x86_64-unknown-linux-musl
          rc=$?
          kill $pids
          wait
          exit $rc

      - name: Rename, Strip Binary
        run: |
          cp target/x86_64-unknown-linux-musl/release/clipipe clipipe-linux-x86_64
          strip clipipe-linux-x86_64

      - name: Upload Artifact
        if: *is-release-ref
        uses: actions/upload-artifact@v4
        with:
          name: clipipe-linux-x86_64
          path: clipipe-linux-x86_64
          if-no-files-found: error

  create-draft-release:
    if: *is-release-ref
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      # Download the built executables
      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts/
          merge-multiple: true

      # Create a draft release
      - name: Create Draft Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
